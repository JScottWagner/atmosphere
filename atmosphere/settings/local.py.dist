import sys

globals().update(vars(sys.modules['atmosphere.settings']))

#Method to generate SECRET_KEY and write it to file..
def generate_secret_key(secret_key_path):
    from django.utils.crypto import get_random_string
    from datetime import datetime
    chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
    secret_value = get_random_string(50, chars)
    comment_block = "\"\"\"\nThis file was Auto-Generated on %s\n\"\"\"\n" % datetime.now()
    with open(secret_key_path,"w") as key_file:
        key_file.write(comment_block)
        key_file.write("SECRET_KEY=\"%s\"\n" % secret_value)

#Generate your SECRET_KEY if it doesn't exist yet.
try:
    from secret_key import SECRET_KEY
except ImportError:
    SETTINGS_DIR=os.path.abspath(os.path.dirname(__file__))
    generate_secret_key(os.path.join(SETTINGS_DIR, 'secret_key.py'))
    try:
        from secret_key import SECRET_KEY
    except ImportError:
        raise Exception("local.py could not generate a SECRET_KEY in secret_key.py")

#Debug Mode
DEBUG = True
TEMPLATE_DEBUG = DEBUG

PROJECT_ROOT = os.path.abspath(
    os.path.join(
        os.path.dirname(__file__), "../.."))
TEST_RUNNER='atmosphere.test_runner.CeleryDiscoverTestSuiteRunner'
TEST_RUNNER_USER=''
TEST_RUNNER_PASS=''

SERVER_URL = ""

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "",
        "USER": "",
        "PASSWORD": "",
        "HOST": "",
        "PORT": ""
    },
}

# Must reassign anything using SERVER_URL.

# Prevents warnings
ALLOWED_HOSTS = [SERVER_URL.replace("https://","")]

#Atmosphere Keypair/Deployment Configs
ATMOSPHERE_KEYPAIR_FILE=os.path.join(PROJECT_ROOT, "path/to/keypair.pub")
ATMOSPHERE_KEYPAIR_NAME=""

# Atmosphere App Configs
INSTANCE_SERVICE_URL = SERVER_URL + REDIRECT_URL + "/api/v1/notification/"
API_SERVER_URL = SERVER_URL + REDIRECT_URL + "/resources/v1"
AUTH_SERVER_URL = SERVER_URL + REDIRECT_URL + "/auth"

# CASLIB
SELF_SIGNED_CERT = False
SERVER_URL = SERVER_URL+REDIRECT_URL
CAS_SERVER = ""
SERVICE_URL = SERVER_URL+"/CAS_serviceValidater?sendback="+REDIRECT_URL+"/application/"
PROXY_URL = SERVER_URL+"/CAS_proxyUrl"
PROXY_CALLBACK_URL = SERVER_URL+"/CAS_proxyCallback"
caslib.cas_init(CAS_SERVER, SERVICE_URL, PROXY_URL, PROXY_CALLBACK_URL, SELF_SIGNED_CERT)
